package models

import (
	"encoding/json"
	"strings"
)

type malware interface{}

type Malware struct {
	BaseModel
	BaseAttributes
	// These are properties from the MITRE ATT&CK json
	XMitrePlatforms         []string            `json:"x_mitre_platforms,omitempty"`
	XMitreAliases           []string            `json:"x_mitre_aliases,omitempty"`
	ExternalReferences      []ExternalReference `json:"external_references"`
	Labels                  []string            `json:"labels"`
	XMitreAttackSpecVersion string              `json:"x_mitre_attack_spec_version"`
	XMitreModifiedByRef     string              `json:"x_mitre_modified_by_ref"`
	XMitreContributors      []string            `json:"x_mitre_contributors,omitempty"`
	malwareExternalAttributes
	Actors     []Actor
	Campaigns  []Campaign
	Techniques []Technique
}

var _ (malware) = new(Malware)

type malwareExternalAttributes struct {
	// external collected data attributes below
	Names              []string    `json:"names"`
	Comments           []string    `json:"comments"`
	Family             []string    `json:"family"`
	Links              []string    `json:"links"`
	License            string      `json:"license"`
	Price              string      `json:"price"`
	Github             string      `json:"github"`
	Site               string      `json:"site"`
	Twitter            string      `json:"twitter"`
	Evaluator          string      `json:"evaluator"`
	Date               string      `json:"date"`
	Version            string      `json:"version"`
	Implementation     string      `json:"implementation"`
	HowTo              string      `json:"how_to"`
	Slingshot          string      `json:"slingshot"`
	Kali               string      `json:"kali"`
	Server             string      `json:"server"`
	Implant            string      `json:"implant"`
	MultiUser          bool        `json:"multi_user"`
	UI                 interface{} `json:"ui"`
	DarkMode           interface{} `json:"dark_mode"`
	API                bool        `json:"api"`
	Windows            bool        `json:"windows"`
	Linux              bool        `json:"linux"`
	MacOS              bool        `json:"macos"`
	TCP                bool        `json:"tcp"`
	HTTP               bool        `json:"http"`
	HTTP2              bool        `json:"http2"`
	HTTP3              bool        `json:"http3"`
	DNS                bool        `json:"dns"`
	DOH                bool        `json:"doh"`
	ICMP               bool        `json:"icmp"`
	FTP                bool        `json:"ftp"`
	IMAP               bool        `json:"imap"`
	MAPI               bool        `json:"mapi"`
	SMB                bool        `json:"smb"`
	LDAP               bool        `json:"ldap"`
	KeyExchange        bool        `json:"key_exchange"`
	Stego              bool        `json:"stego"`
	ProxyAware         bool        `json:"proxy_aware"`
	DomainFront        bool        `json:"domainfront"`
	CustomProfile      bool        `json:"custom_profile"`
	Jitter             bool        `json:"jitter"`
	WorkingHours       bool        `json:"working_hours"`
	KillDate           bool        `json:"kill_date"`
	Chaining           bool        `json:"chaining"`
	Logging            bool        `json:"logging"`
	InWild             bool        `json:"in_wild"`
	AttckMapping       bool        `json:"attck_mapping"`
	Dashboard          bool        `json:"dashboard"`
	Blog               string      `json:"blog"`
	C2MatrixIndicators string      `json:"c2_matrix_indicators"`
	Jarm               bool        `json:"jarm"`
	ActivelyMaint      bool        `json:"actively_maint"`
	Slack              bool        `json:"slack"`
	SlackMembers       bool        `json:"slack_members"`
	GhIssues           bool        `json:"gh_issues"`
	Notes              string      `json:"notes"`
	SocksSupport       bool        `json:"socks_support"`
}

func NewMalware(object map[string]interface{}) (Malware, error) {
	malware := Malware{}
	jsonString, _ := json.Marshal(object)
	json.Unmarshal(jsonString, &malware)
	return malware, nil
}

func (m *Malware) GetExternalID() string {
	mitreID := ""
	for _, ref := range m.ExternalReferences {
		if ref.ExternalId != "" && mitreID == "" {
			if strings.HasPrefix(ref.ExternalId, "S") {
				mitreID = ref.ExternalId
			}
		}
	}
	return mitreID
}
